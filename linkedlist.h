#define LIST_END ((void*)0)	/* end of list */#define LIST_TYPE t_samplor_inputs/* LISTE DE VOIX */typedef struct _samplor_entry {	/* entry in samplor list */    struct _samplor_entry *next;	/* list link (has to be the first component) */    long count;			/* samples to go */    long position;		/*in buffer (samples): */    t_samplor_real fposition;	/*in float for stretching */    t_samplor_real fposition2;	/*fposition shadow for looprelease */	t_samplor_real increment;	/*in float for stretching */	long begin;			/* debut in samples */    long dur;			/* duration in samples */    long end;			/* duration in samples */    long attack;			/* duration in samples */ 	long decay;				/* duration in samples */    float sustain;			/* relative amplitude */ 	long release;			/* duration in samples */    float release_curve;	/*x exponential release */	float attack_ratio;		/* 1/attack_duration */ 	float decay_ratio;		/* 1/decay_duration */    float release_ratio;	/* 1/release_duration */    float release_ratio2;	/* 1/release_duration/transp */	long win;				/* type of window */	long loop_flag;			/* loop mode */	long loop_beg;			/* in samples from aiff files */	long loop_end;				long loop_dur;				long loop_beg_d;			/* dynamically modified loop points in samples  */	long loop_end_d;				long loop_dur_d;				t_samplor_real amplitude;			t_samplor_real pan;			long chan;    long chan2;    long chan3;    long chan4;	t_samplor_real rev;		//	t_buffer *buf;		       /* points to a buffer~ object -- deprecated but kept only bicoz of loop points */  //  t_buffer_obj *buf_obj;	   /* points to a buffer~ object */    t_samplorbuffer *samplor_buf;    t_samplormmap *mmap_buf;    t_symbol *buf_name;  /*since t_buffer is deprecated, to avoid sneaking into buffer_info ...*/    int samplenumber;	/* pour pouvoir stopper */    long fade_out_time;	/* for fast fade out */    long fade_out_counter; /* for fast fade out */	long fade_out_end;	/* for fast fade out */    long start;			/* start sample in current block */} t_samplor_entry;typedef struct _samplor_list {	/* samplor list */    t_samplor_entry *free;		/* points to the free store */    t_samplor_entry *used;		/* points to the first element */    t_samplor_entry *at_end;	/* points to the last element */    long maxvoices;				/* maximum number of entries (<= MAX_VOICES) */	t_samplor_entry *samplors;} t_samplor_list;/* LISTE DE NOTES EN ATTENTE */typedef struct _list_item_ {	struct  _list_item_  *next;	/* list link (has to be the first component) */	LIST_TYPE inputs;} t_list_item;typedef struct _list {	     /* samplor queue */    t_list_item *list;		/*  points to the first element */    t_list_item *free;		/* points to the free store */    t_list_item *at_end;	/* points to the last element */    t_list_item items[WAITINGNOTES];	/* entry space */} t_list;t_samplor_entry *samplist_free_voice(t_samplor_list *x, t_samplor_entry *prev, t_samplor_entry *curr);void samplist_init(t_samplor_list *x);void samplist_display(t_samplor_list *x);int samplist_count(t_samplor_list *x);t_samplor_entry *samplist_insert(t_samplor_list *x,long start, t_samplor_inputs inputs);t_samplor_entry *samplist_append(t_samplor_list *x,long start, t_samplor_inputs inputs);t_samplor_entry *samplist_pop(t_samplor_list *x);t_samplor_entry *samplist_new_voice(t_samplor_list *x,long start, t_samplor_inputs inputs);void list_init(t_list *x);t_list_item *new_list_item(t_list *x,LIST_TYPE inputs);void list_insert(t_list *x,LIST_TYPE inputs);t_list_item *list_free(t_list *x,t_list_item *prev, t_list_item *curr);t_list_item *list_pop(t_list *x);t_list_item *list_append(t_list *x,LIST_TYPE inputs);void list_display (t_list *x);